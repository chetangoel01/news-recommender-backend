version: '3.8'

services:
  # API Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: news-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://news_user:news_password@db:5432/news_recommender
      - NEWS_API_KEY=${NEWS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - api_logs:/app/logs
    networks:
      - news-network
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Pipeline Service
  pipeline:
    build:
      context: ..
      dockerfile: docker/Dockerfile.pipeline
    container_name: news-pipeline
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://news_user:news_password@db:5432/news_recommender
      - NEWS_API_KEY=${NEWS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
      - PIPELINE_INTERVAL_HOURS=12
    volumes:
      - pipeline_logs:/app/pipeline/logs
      - pipeline_cache:/app/pipeline/cached_articles.json
    networks:
      - news-network
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.8'
        reservations:
          memory: 1G
          cpus: '0.4'
    healthcheck:
      test: ["CMD", "python", "-c", "import os; print('Pipeline service is running')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database Service
  db:
    image: pgvector/pgvector:pg16
    container_name: news-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=news_recommender
      - POSTGRES_USER=news_user
      - POSTGRES_PASSWORD=news_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - news-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U news_user -d news_recommender"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=16MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: news-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - news-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: news-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - news-network
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Monitoring Service (Optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: news-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - news-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  pipeline_logs:
    driver: local
  pipeline_cache:
    driver: local
  prometheus_data:
    driver: local

networks:
  news-network:
    driver: bridge 